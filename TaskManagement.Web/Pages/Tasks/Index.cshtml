@page
@model TaskManagement.Web.Pages.Tasks.IndexModel
@{
    ViewData["Title"] = "My Tasks";
}

<div class="container">
    <h2>My Tasks</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Create Button that should be visible -->
    @if (Model.IsManager)
    {
        <div class="mb-3">
            <a asp-page="Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Create New Task
            </a>
        </div>
    }

    @if (!Model.Tasks.Any())
    {
        <div class="alert alert-info">
            <h4>No tasks found</h4>
            <p>You don't have any tasks assigned to you yet.</p>
            @if (Model.IsManager)
            {
                <a asp-page="Create" class="btn btn-primary">Create your first task</a>
            }
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var task in Model.Tasks)
            {
                <div class="col-md-6 mb-3">
                    <div class="card task-card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@task.Title</h5>
                            <p class="card-text">@task.Description</p>

                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="badge bg-@GetStatusBadgeClass(task.Status)">@task.Status</span>
                                <span class="badge bg-@GetPriorityBadgeClass(task.Priority)">@task.Priority</span>
                            </div>

                            <p class="card-text">
                                <small class="text-muted">
                                    <strong>Project:</strong> @task.Project?.Name<br>
                                    <strong>Due:</strong> @(task.DueDate?.ToString("d") ?? "No due date")<br>
                                    <strong>Assigned to:</strong> @task.AssignedTo?.FirstName @task.AssignedTo?.LastName
                                </small>
                            </p>
                            
                            @if (Model.IsManager || Model.IsMember)
                            {
                                <div class="d-flex gap-2 mt-3">
                                    <a asp-page="Edit" asp-route-id="@task.Id" class="btn btn-secondary btn-sm">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>

                                    <!-- Status Update Form -->
                                    <form method="post" asp-page-handler="UpdateStatus" class="d-inline">
                                        <input type="hidden" name="taskId" value="@task.Id" />
                                        <select name="status" class="form-select form-select-sm"
                                                onchange="this.form.submit()" style="width: auto; display: inline-block;">
                                            @foreach (var status in Enum.GetValues(typeof(TaskManagement.Core.Enums.TaskStatus)))
                                            {
                                                <option value="@status" selected="@(status.Equals(task.Status))">@status</option>
                                            }
                                        </select>
                                    </form>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
}

@functions {
    private string GetStatusBadgeClass(TaskManagement.Core.Enums.TaskStatus status)
    {
        return status switch
        {
            TaskManagement.Core.Enums.TaskStatus.Completed => "success",
            TaskManagement.Core.Enums.TaskStatus.InProgress => "primary",
            TaskManagement.Core.Enums.TaskStatus.Blocked => "danger",
            _ => "secondary"
        };
    }

    private string GetPriorityBadgeClass(TaskManagement.Core.Enums.TaskPriority priority)
    {
        return priority switch
        {
            TaskManagement.Core.Enums.TaskPriority.High => "warning",
            TaskManagement.Core.Enums.TaskPriority.Critical => "danger",
            _ => "info"
        };
    }
}